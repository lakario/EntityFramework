// <auto-generated />
namespace Microsoft.Data.Entity.Relational
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.Data.Entity.Relational.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        internal static string ArgumentIsEmpty
        {
            get { return GetString("ArgumentIsEmpty"); }
        }

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        internal static string FormatArgumentIsEmpty(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        internal static string InvalidEnumValue
        {
            get { return GetString("InvalidEnumValue"); }
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        internal static string FormatInvalidEnumValue(object argumentName, object enumType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidEnumValue", "argumentName", "enumType"), argumentName, enumType);
        }

        /// <summary>
        /// The schema qualified name '{name}' is invalid. Schema qualified names must be of the form [&lt;schema_name&gt;.]&lt;object_name&gt;.
        /// </summary>
        internal static string InvalidSchemaQualifiedName
        {
            get { return GetString("InvalidSchemaQualifiedName"); }
        }

        /// <summary>
        /// The schema qualified name '{name}' is invalid. Schema qualified names must be of the form [&lt;schema_name&gt;.]&lt;object_name&gt;.
        /// </summary>
        internal static string FormatInvalidSchemaQualifiedName(object name)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidSchemaQualifiedName", "name"), name);
        }

        /// <summary>
        /// Can not create a ModificationFunction for an entity in state '{entityState}'.
        /// </summary>
        internal static string ModificationFunctionInvalidEntityState
        {
            get { return GetString("ModificationFunctionInvalidEntityState"); }
        }

        /// <summary>
        /// Can not create a ModificationFunction for an entity in state '{entityState}'.
        /// </summary>
        internal static string FormatModificationFunctionInvalidEntityState(object entityState)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ModificationFunctionInvalidEntityState", "entityState"), entityState);
        }

        /// <summary>
        /// Update failed. Expected {expectedRows} row(s) but {actualRows} row(s) returned.
        /// </summary>
        internal static string UpdateConcurrencyException
        {
            get { return GetString("UpdateConcurrencyException"); }
        }

        /// <summary>
        /// Update failed. Expected {expectedRows} row(s) but {actualRows} row(s) returned.
        /// </summary>
        internal static string FormatUpdateConcurrencyException(object expectedRows, object actualRows)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UpdateConcurrencyException", "expectedRows", "actualRows"), expectedRows, actualRows);
        }

        /// <summary>
        /// A modification command returned more than one row. Each modification command must return at most one row.
        /// </summary>
        internal static string TooManyRowsForModificationCommand
        {
            get { return GetString("TooManyRowsForModificationCommand"); }
        }

        /// <summary>
        /// A modification command returned more than one row. Each modification command must return at most one row.
        /// </summary>
        internal static string FormatTooManyRowsForModificationCommand()
        {
            return GetString("TooManyRowsForModificationCommand");
        }

        /// <summary>
        /// Multiple relational data store configurations found. A context can only be configured to use a single data store.
        /// </summary>
        internal static string MultipleDataStoresConfigured
        {
            get { return GetString("MultipleDataStoresConfigured"); }
        }

        /// <summary>
        /// Multiple relational data store configurations found. A context can only be configured to use a single data store.
        /// </summary>
        internal static string FormatMultipleDataStoresConfigured()
        {
            return GetString("MultipleDataStoresConfigured");
        }

        /// <summary>
        /// No relational data stores are configured. Configure a data store using OnConfiguring or by creating an ImmutableDbContextOptions with a data store configured and passing it to the context.
        /// </summary>
        internal static string NoDataStoreConfigured
        {
            get { return GetString("NoDataStoreConfigured"); }
        }

        /// <summary>
        /// No relational data stores are configured. Configure a data store using OnConfiguring or by creating an ImmutableDbContextOptions with a data store configured and passing it to the context.
        /// </summary>
        internal static string FormatNoDataStoreConfigured()
        {
            return GetString("NoDataStoreConfigured");
        }

        /// <summary>
        /// Both an existing DbConnection and a connection string have been configured. When an existing DbConnection is used the connection string must be set on that connection.
        /// </summary>
        internal static string ConnectionAndConnectionString
        {
            get { return GetString("ConnectionAndConnectionString"); }
        }

        /// <summary>
        /// Both an existing DbConnection and a connection string have been configured. When an existing DbConnection is used the connection string must be set on that connection.
        /// </summary>
        internal static string FormatConnectionAndConnectionString()
        {
            return GetString("ConnectionAndConnectionString");
        }

        /// <summary>
        /// A relational store has been configured without specifying either the DbConnection or connection string to use.
        /// </summary>
        internal static string NoConnectionOrConnectionString
        {
            get { return GetString("NoConnectionOrConnectionString"); }
        }

        /// <summary>
        /// A relational store has been configured without specifying either the DbConnection or connection string to use.
        /// </summary>
        internal static string FormatNoConnectionOrConnectionString()
        {
            return GetString("NoConnectionOrConnectionString");
        }

        /// <summary>
        /// The property '{0}' cannot be mapped because it is of type '{1}' which is currently not supported.'
        /// </summary>
        internal static string UnsupportedType
        {
            get { return GetString("UnsupportedType"); }
        }

        /// <summary>
        /// The property '{0}' cannot be mapped because it is of type '{1}' which is currently not supported.'
        /// </summary>
        internal static string FormatUnsupportedType(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnsupportedType"), p0, p1);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);
    
            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
